// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/hotel.proto

package hotel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HotelService_AddHotel_FullMethodName    = "/hotel.HotelService/AddHotel"
	HotelService_GetHotel_FullMethodName    = "/hotel.HotelService/GetHotel"
	HotelService_GetHotels_FullMethodName   = "/hotel.HotelService/GetHotels"
	HotelService_UpdateHotel_FullMethodName = "/hotel.HotelService/UpdateHotel"
	HotelService_DeleteHotel_FullMethodName = "/hotel.HotelService/DeleteHotel"
)

// HotelServiceClient is the client API for HotelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HotelServiceClient interface {
	AddHotel(ctx context.Context, in *AddHotelRequest, opts ...grpc.CallOption) (*AddHotelResponse, error)
	GetHotel(ctx context.Context, in *GetHotelRequest, opts ...grpc.CallOption) (*GetHotelResponse, error)
	GetHotels(ctx context.Context, in *ListHotelsRequest, opts ...grpc.CallOption) (*ListHotelsResponse, error)
	UpdateHotel(ctx context.Context, in *UpdateHotelRequest, opts ...grpc.CallOption) (*UpdateHotelResponse, error)
	DeleteHotel(ctx context.Context, in *DeleteHotelRequest, opts ...grpc.CallOption) (*DeleteHotelResponse, error)
}

type hotelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHotelServiceClient(cc grpc.ClientConnInterface) HotelServiceClient {
	return &hotelServiceClient{cc}
}

func (c *hotelServiceClient) AddHotel(ctx context.Context, in *AddHotelRequest, opts ...grpc.CallOption) (*AddHotelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddHotelResponse)
	err := c.cc.Invoke(ctx, HotelService_AddHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) GetHotel(ctx context.Context, in *GetHotelRequest, opts ...grpc.CallOption) (*GetHotelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHotelResponse)
	err := c.cc.Invoke(ctx, HotelService_GetHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) GetHotels(ctx context.Context, in *ListHotelsRequest, opts ...grpc.CallOption) (*ListHotelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHotelsResponse)
	err := c.cc.Invoke(ctx, HotelService_GetHotels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) UpdateHotel(ctx context.Context, in *UpdateHotelRequest, opts ...grpc.CallOption) (*UpdateHotelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateHotelResponse)
	err := c.cc.Invoke(ctx, HotelService_UpdateHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) DeleteHotel(ctx context.Context, in *DeleteHotelRequest, opts ...grpc.CallOption) (*DeleteHotelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteHotelResponse)
	err := c.cc.Invoke(ctx, HotelService_DeleteHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotelServiceServer is the server API for HotelService service.
// All implementations must embed UnimplementedHotelServiceServer
// for forward compatibility.
type HotelServiceServer interface {
	AddHotel(context.Context, *AddHotelRequest) (*AddHotelResponse, error)
	GetHotel(context.Context, *GetHotelRequest) (*GetHotelResponse, error)
	GetHotels(context.Context, *ListHotelsRequest) (*ListHotelsResponse, error)
	UpdateHotel(context.Context, *UpdateHotelRequest) (*UpdateHotelResponse, error)
	DeleteHotel(context.Context, *DeleteHotelRequest) (*DeleteHotelResponse, error)
	mustEmbedUnimplementedHotelServiceServer()
}

// UnimplementedHotelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHotelServiceServer struct{}

func (UnimplementedHotelServiceServer) AddHotel(context.Context, *AddHotelRequest) (*AddHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHotel not implemented")
}
func (UnimplementedHotelServiceServer) GetHotel(context.Context, *GetHotelRequest) (*GetHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotel not implemented")
}
func (UnimplementedHotelServiceServer) GetHotels(context.Context, *ListHotelsRequest) (*ListHotelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotels not implemented")
}
func (UnimplementedHotelServiceServer) UpdateHotel(context.Context, *UpdateHotelRequest) (*UpdateHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHotel not implemented")
}
func (UnimplementedHotelServiceServer) DeleteHotel(context.Context, *DeleteHotelRequest) (*DeleteHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHotel not implemented")
}
func (UnimplementedHotelServiceServer) mustEmbedUnimplementedHotelServiceServer() {}
func (UnimplementedHotelServiceServer) testEmbeddedByValue()                      {}

// UnsafeHotelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotelServiceServer will
// result in compilation errors.
type UnsafeHotelServiceServer interface {
	mustEmbedUnimplementedHotelServiceServer()
}

func RegisterHotelServiceServer(s grpc.ServiceRegistrar, srv HotelServiceServer) {
	// If the following call pancis, it indicates UnimplementedHotelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HotelService_ServiceDesc, srv)
}

func _HotelService_AddHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).AddHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_AddHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).AddHotel(ctx, req.(*AddHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_GetHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_GetHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetHotel(ctx, req.(*GetHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_GetHotels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHotelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetHotels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_GetHotels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetHotels(ctx, req.(*ListHotelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_UpdateHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).UpdateHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_UpdateHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).UpdateHotel(ctx, req.(*UpdateHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_DeleteHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).DeleteHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_DeleteHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).DeleteHotel(ctx, req.(*DeleteHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HotelService_ServiceDesc is the grpc.ServiceDesc for HotelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HotelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hotel.HotelService",
	HandlerType: (*HotelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddHotel",
			Handler:    _HotelService_AddHotel_Handler,
		},
		{
			MethodName: "GetHotel",
			Handler:    _HotelService_GetHotel_Handler,
		},
		{
			MethodName: "GetHotels",
			Handler:    _HotelService_GetHotels_Handler,
		},
		{
			MethodName: "UpdateHotel",
			Handler:    _HotelService_UpdateHotel_Handler,
		},
		{
			MethodName: "DeleteHotel",
			Handler:    _HotelService_DeleteHotel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/hotel.proto",
}
